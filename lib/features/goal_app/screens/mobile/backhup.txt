

//UI

// class GoalChatPage extends StatefulWidget {
//   final int goalId;

//   GoalChatPage({required this.goalId, Key? key}) : super(key: key);

//   @override
//   _GoalChatPageState createState() => _GoalChatPageState();
// }

// class _GoalChatPageState extends State<GoalChatPage> {
  
//   late final ChatBloc _chatBloc;
//   TextEditingController messageController = TextEditingController();
//   final FocusNode _focusNode = FocusNode();
//   final ScrollController _scrollController = ScrollController();

//   @override
//   void initState() {
//     super.initState();
//     _chatBloc = ChatBloc(widget.goalId); // initialize the bloc
//     _chatBloc.add(FetchChatHistoryEvent(goalId: widget.goalId, currentPage: 0, pageSize: 10)); // Example event to load initial chat
//   }

//   @override
//   void dispose() {
//     _chatBloc.close();
//     messageController.dispose();
//     _focusNode.dispose();
//     _scrollController.dispose();
//     super.dispose();
//   }

//   @override
//   Widget build(BuildContext context) {
//     return BlocProvider.value(
//       value: _chatBloc,
//       child: BlocConsumer<ChatBloc, ChatState>(
//         listener: _chatBlocListener,
//         builder: _chatBlocBuilder,
//       ),
//     );
//   }

//   void _chatBlocListener(BuildContext context, ChatState state) {
//     // Your listener logic here
//     if (state is ErrorState) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text(state.errorMessage))
//       );
//     } else if (state is ConnectionSuccessState) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Successfully connected!'))
//       );
//     }
//   }

//   Widget _chatBlocBuilder(BuildContext context, ChatState state) {
//     return Scaffold(
//       appBar: AppBar(
//         elevation: 0,
//         title: Text(
//           'Coach',
//           style: TextStyle(
//             color: Colors.white,
//           ),
//         ),
//       ),
//       body: GestureDetector(
//         onTap: () {
//           FocusScope.of(context).unfocus();
//         },
//         child: SafeArea(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.stretch,
//             children: [
//               Expanded(
//                 child: _buildMessagesList(state),
//               ),
//               _buildMessageInput(),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
//   Widget _buildMessagesList(ChatState state) {
//     if (state is InitialChatState) {
//       return Center(child: CircularProgressIndicator());
//     } else if (state is ChatHistoryFetchedState) {
//       return ListView.builder(
//         reverse: true,
//         itemCount: state.messages.length,
//         itemBuilder: (BuildContext context, int index) {
//           Message message = state.messages[index];
//           return Align(
//             alignment: message.isBot
//                 ? Alignment.centerLeft
//                 : Alignment.centerRight,
//             child: Container(
//               margin: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
//               padding: EdgeInsets.all(10),
//               decoration: BoxDecoration(
//                 color: message.isBot ? Colors.grey[300] : Colors.white,
//                 borderRadius: BorderRadius.circular(10),
//               ),
//               child: Text(
//                 message.text,
//                 style: TextStyle(
//                   color: Colors.black,
//                   fontSize: 16,
//                 ),
//               ),
//             ),
//           );
//         },
//       );
//     } else {
//       return Center(child: Text('Unhandled state: ${state.runtimeType}'));
//     }
//   }

//   Widget _buildMessageInput() {
//     return Container(
//       padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
//       child: Row(
//         children: [
//           Expanded(
//             child: TextField(
//               controller: messageController,
//               decoration: InputDecoration(
//                 hintText: 'Type your message...',
//                 border: OutlineInputBorder(
//                   borderRadius: BorderRadius.circular(20),
//                 ),
//               ),
//             ),
//           ),
//           SizedBox(width: 10),
//           IconButton(
//             onPressed: () {
//               String message = messageController.text.trim();
//               if (message.isNotEmpty) {

//                 // context.read<ChatBloc>().add(SendMessageEvent(message));
//                 _chatBloc.add(SendMessageEvent(message));
//                 messageController.clear();
//               }
//             },
//             icon: Icon(Icons.send),
//           ),
//         ],
//       ),
//     );
//   }
// }




import 'dart:async';
import 'package:flutter/material.dart';
import 'package:dots_indicator/dots_indicator.dart';
import '../../services/service.dart';
import '../../models/model.dart';
import 'package:provider/provider.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '/config/config.dart';



// Events
abstract class ChatEvent {}

class FetchChatHistoryEvent extends ChatEvent {
  final int goalId;
  final int currentPage;
  final int pageSize;

  FetchChatHistoryEvent({
    required this.goalId,
    required this.currentPage,
    required this.pageSize,
  });
}

class SendMessageEvent extends ChatEvent {
  final String message;

  SendMessageEvent(this.message);
}


class IncomingMessageEvent extends ChatEvent {
  final dynamic messageType;
  final dynamic message;
  final dynamic sender;

  IncomingMessageEvent({
    required this.messageType,
    required this.message,
    required this.sender,
  });
}

class StartChatEvent extends ChatEvent {}
class StreamChatEvent extends ChatEvent {
  final String message;
  StreamChatEvent(this.message);
}
class EndChatEvent extends ChatEvent {}


// States
abstract class ChatState {}

class InitialChatState extends ChatState {}

class ChatHistoryFetchedState extends ChatState {
  final List<Message> messages;

  ChatHistoryFetchedState(this.messages);
}

class MessageSentState extends ChatState {}

class IncomingMessageState extends ChatState {
  final Message message;

  IncomingMessageState(this.message);
}

class ErrorState extends ChatState {
  final String errorMessage;

  ErrorState(this.errorMessage);
}

class ConnectionSuccessState extends ChatState {}

class TypingAnimationState extends ChatState {}

class StopTypingAnimationState extends ChatState {}

class ChatStartedState extends ChatState {}

class ChatEndedState extends ChatState {}





//bloc

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  List<Message> messages = [];
  final int pageSize = 10;
  int currentPage = 0;
  bool isLoadingHistory = false;

  GoalChat? chat;

  ChatBloc(int goalId) : super(InitialChatState()) {
    chat = GoalChat(
      goalId: goalId,
      onMessageReceived: _handleIncomingMessage,
      onConnectionError: _handleConnectionError,
      onConnectionSuccess: _handleConnectionSuccess,
    );

    add(FetchChatHistoryEvent(goalId: goalId, currentPage: currentPage, pageSize: pageSize));
  }

  @override
  Stream<ChatState> mapEventToState(ChatEvent event) async* {
    if (event is FetchChatHistoryEvent) {
      if (isLoadingHistory) yield ErrorState("Already loading history");
      isLoadingHistory = true;

      yield* fetchChatHistory(event.goalId, event.currentPage, event.pageSize)
          .map((fetchedMessages) {
            messages.addAll(fetchedMessages.reversed);
            currentPage++;
            return ChatHistoryFetchedState(messages);
          })
          .handleError((error) {
            return ErrorState('Error fetching chat history: $error');
          });

      isLoadingHistory = false;

    } else if (event is SendMessageEvent) {
      messages.add(Message(text: event.message, isBot: false));
      messages.add(Message(text: '', isBot: true, isWaiting: true));
      print("Yes");
      //chat?.sendMessage(event.message);
      // yield MessageSentState();
      yield ChatHistoryFetchedState(messages);

    } else if (event is IncomingMessageEvent) {
      _handleIncomingMessage(event.messageType, event.message, event.sender);
      // You might want to yield a state here if necessary.
    }
  }

  void _handleIncomingMessage(dynamic messageType, dynamic message, dynamic sender) {
    int lastIndex = messages.length - 1;

    if (messageType == 'start' && sender == "bot") {
        messages.add(Message(text: 'Chat started with bot.', isBot: true, isWaiting: false));
        add(StartChatEvent());

    } else if (messageType == 'stream' && sender == "bot") {
        if (messages.last.isWaiting) {
            messages.removeAt(lastIndex);
            messages.insert(lastIndex, Message(text: message, isBot: true, isWaiting: false));
        } else {
            messages[lastIndex].text += message;
        }
        add(StreamChatEvent(message));

    } else if (messageType == 'end' && sender == 'bot') {
        messages.add(Message(text: 'Bot has finished its reply.', isBot: true, isWaiting: false));
        add(EndChatEvent());
    }
  }

  void _handleConnectionError(dynamic error) {
      // Consider creating a new event for this action or handling it differently.
  }

  void _handleConnectionSuccess() {
      // Consider creating a new event for this action or handling it differently.
  }



  @override
  Future<void> close() {
    chat?.closeConnection();
    return super.close();
  }
}


class GoalChatPage extends StatefulWidget {
  final int goalId;

  GoalChatPage({required this.goalId, Key? key}) : super(key: key);

  @override
  _GoalChatPageState createState() => _GoalChatPageState();
}

class _GoalChatPageState extends State<GoalChatPage> {
  late ChatBloc _chatBloc;
  TextEditingController messageController = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _chatBloc = ChatBloc(widget.goalId);
    _chatBloc.add(FetchChatHistoryEvent(goalId: widget.goalId, currentPage: 1, pageSize: 10));
    _focusNode.addListener(_onFocusChange);
    _scrollController.addListener(_scrollListener);
  }

  void _onFocusChange() {
    if (_focusNode.hasFocus) {
      Future.delayed(Duration(milliseconds: 300), _scrollToBottom);
    }
  }

  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: Duration(milliseconds: 5),
        curve: Curves.easeInOut,
      );
    }
  }

  void _scrollListener() {
    if (_scrollController.position.pixels == _scrollController.position.minScrollExtent &&
        !_scrollController.position.outOfRange) {
      _chatBloc.add(FetchChatHistoryEvent(goalId: widget.goalId, currentPage: _chatBloc.currentPage + 1, pageSize: 10));
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => _chatBloc,
      child: BlocConsumer<ChatBloc, ChatState>(
        listener: (context, state) {
            if (state is ErrorState) {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(state.errorMessage)));
            }
            // Handle other side effects like scrolling, clearing the messageController, etc.
        },
        builder: (context, state) {
            List<Message> messages = [];
            if (state is ChatHistoryFetchedState) {
                messages = state.messages;
            }
            return _buildUI(messages, context);
        },
    ),
    );
  }

  Widget _buildUI(List<Message> messages, BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        title: Text(
          'Coach',
          style: TextStyle(
            color: Colors.white,
          ),
        ),
      ),
      body: GestureDetector(
        onTap: () {
          FocusScope.of(context).unfocus();
        },
        child: SafeArea(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Expanded(
                child: ListView.builder(
                  // reverse: true,
                  itemCount: messages.length,
                  itemBuilder: (BuildContext context, int index) {
                    Message message = messages[index];
                    return Align(
                      alignment: message.isBot
                          ? Alignment.centerLeft
                          : Alignment.centerRight,
                      child: Container(
                        margin:
                            EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                        padding: EdgeInsets.all(10),
                        decoration: BoxDecoration(
                          color: message.isBot
                              ? Colors.grey[300]
                              : Colors.white,
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          message.text,
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: messageController,
                        decoration: InputDecoration(
                          hintText: 'Type your message...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 10),
                    IconButton(
                      onPressed: () {
                        String message = messageController.text.trim();
                        if (message.isNotEmpty) {
                          _chatBloc.add(SendMessageEvent(message));
                          messageController.clear();
                        }
                      },
                      icon: Icon(Icons.send),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    messageController.dispose();
    _focusNode.dispose();
    _scrollController.dispose();
    _chatBloc.close();
    super.dispose();
  }
}



//  backup2

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:dots_indicator/dots_indicator.dart';
import '../../services/service.dart';
import '../../models/model.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '/config/config.dart';



// Events
abstract class ChatEvent {}

class FetchChatHistoryEvent extends ChatEvent {
  final int goalId;
  final int currentPage;
  final int pageSize;

  FetchChatHistoryEvent({
    required this.goalId,
    required this.currentPage,
    required this.pageSize,
  });
}

class SendMessageEvent extends ChatEvent {
  final String message;

  SendMessageEvent(this.message);
}


class IncomingMessageEvent extends ChatEvent {
  final dynamic messageType;
  final dynamic message;
  final dynamic sender;

  IncomingMessageEvent({
    required this.messageType,
    required this.message,
    required this.sender,
  });
}

class StartChatEvent extends ChatEvent {}
class StreamChatEvent extends ChatEvent {
  final String message;
  StreamChatEvent(this.message);
}
class EndChatEvent extends ChatEvent {}


// States
abstract class ChatState {}

class InitialChatState extends ChatState {}

class ChatHistoryFetchedState extends ChatState {
  final List<Message> messages;

  ChatHistoryFetchedState(this.messages);
}

class MessageSentState extends ChatState {}

class IncomingMessageState extends ChatState {
  final Message message;

  IncomingMessageState(this.message);
}

class ErrorState extends ChatState {
  final String errorMessage;

  ErrorState(this.errorMessage);
}

class ConnectionSuccessState extends ChatState {}

class TypingAnimationState extends ChatState {}

class StopTypingAnimationState extends ChatState {}

class ChatStartedState extends ChatState {}

class ChatEndedState extends ChatState {}





//bloc

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  List<Message> messages = [];
  final int pageSize = 10;
  int currentPage = 0;
  bool isLoadingHistory = false;

  GoalChat? chat;

  ChatBloc(int goalId) : super(InitialChatState()) {
    chat = GoalChat(
      goalId: goalId,
      onMessageReceived: _handleIncomingMessage,
      onConnectionError: _handleConnectionError,
      onConnectionSuccess: _handleConnectionSuccess,
    );

    add(FetchChatHistoryEvent(goalId: goalId, currentPage: currentPage, pageSize: pageSize));
  }

  @override
  Stream<ChatState> mapEventToState(ChatEvent event) async* {
    if (event is FetchChatHistoryEvent) {
      if (isLoadingHistory) yield ErrorState("Already loading history");
      isLoadingHistory = true;

      yield* fetchChatHistory(event.goalId, event.currentPage, event.pageSize)
          .map((fetchedMessages) {
            messages.addAll(fetchedMessages.reversed);
            currentPage++;
            return ChatHistoryFetchedState(messages);
          })
          .handleError((error) {
            return ErrorState('Error fetching chat history: $error');
          });

      isLoadingHistory = false;

    } else if (event is SendMessageEvent) {
      messages.add(Message(text: event.message, isBot: false));
      messages.add(Message(text: '', isBot: true, isWaiting: true));
      chat?.sendMessage(event.message);
      yield ChatHistoryFetchedState(messages);

    } else if (event is IncomingMessageEvent) {
      _handleIncomingMessage(event.messageType, event.message, event.sender);
      // You might want to yield a state here if necessary.
      yield ChatHistoryFetchedState(messages);
    }
  }

  void _handleIncomingMessage(dynamic messageType, dynamic message, dynamic sender) {
    int lastIndex = messages.length - 1;
    print(message);
    if (messageType == 'start' && sender == "bot") {
        add(StartChatEvent());

    } else if (messageType == 'stream' && sender == "bot") {
        if (messages.last.isWaiting) {
            messages.removeAt(lastIndex);
            messages.insert(lastIndex, Message(text: message, isBot: true, isWaiting: false));
        } else {
            messages[lastIndex].text += message;
        }
        add(StreamChatEvent(message));

    } else if (messageType == 'end' && sender == 'bot') {
        add(EndChatEvent());
    }
  }

  void _handleConnectionError(dynamic error) {
      // Consider creating a new event for this action or handling it differently.
  }

  void _handleConnectionSuccess() {
      // Consider creating a new event for this action or handling it differently.
  }



  @override
  Future<void> close() {
    chat?.closeConnection();
    return super.close();
  }
}


class GoalChatPage extends StatefulWidget {
  final int goalId;

  GoalChatPage({required this.goalId, Key? key}) : super(key: key);

  @override
  _GoalChatPageState createState() => _GoalChatPageState();
}

class _GoalChatPageState extends State<GoalChatPage> {
  late ChatBloc _chatBloc;
  TextEditingController messageController = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _chatBloc = ChatBloc(widget.goalId);
    _chatBloc.add(FetchChatHistoryEvent(goalId: widget.goalId, currentPage: 1, pageSize: 10));
    _focusNode.addListener(_onFocusChange);
    _scrollController.addListener(_scrollListener);
  }

  void _onFocusChange() {
    if (_focusNode.hasFocus) {
      Future.delayed(Duration(milliseconds: 300), _scrollToBottom);
    }
  }

  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: Duration(milliseconds: 5),
        curve: Curves.easeInOut,
      );
    }
  }

  void _scrollListener() {
    if (_scrollController.position.pixels == _scrollController.position.minScrollExtent &&
        !_scrollController.position.outOfRange) {
      _chatBloc.add(FetchChatHistoryEvent(goalId: widget.goalId, currentPage: _chatBloc.currentPage + 1, pageSize: 10));
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => _chatBloc,
      child: BlocConsumer<ChatBloc, ChatState>(
        // listenWhen: (previous, current) {},
        // buildWhen: (previous, current) {},
        listener: (context, state) {
          // if(state is MessageSentState){
          //   IncomingMessageEvent;
          // }else 
          if (state is ErrorState) {
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(state.errorMessage)));
          }
            // Handle other side effects like scrolling, clearing the messageController, etc.
        },
        builder: (context, state) {
            List<Message> messages = [];
            if (state is ChatHistoryFetchedState) {
                messages = state.messages;
            }
            return _buildUI(messages, context);
        },
    ),
    );
  }

  Widget _buildUI(List<Message> messages, BuildContext context) {
    print("Yes!!");
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        title: Text(
          'Coach',
          style: TextStyle(
            color: Colors.white,
          ),
        ),
      ),
      body: GestureDetector(
        onTap: () {
          FocusScope.of(context).unfocus();
        },
        child: SafeArea(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Expanded(
                child: ListView.builder(
                  // reverse: true,
                  itemCount: messages.length,
                  itemBuilder: (BuildContext context, int index) {
                    Message message = messages[index];
                    return Align(
                      alignment: message.isBot
                          ? Alignment.centerLeft
                          : Alignment.centerRight,
                      child: Container(
                        margin:
                            EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                        padding: EdgeInsets.all(10),
                        decoration: BoxDecoration(
                          color: message.isBot
                              ? Colors.grey[300]
                              : Colors.white,
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          message.text,
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: messageController,
                        decoration: InputDecoration(
                          hintText: 'Type your message...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 10),
                    IconButton(
                      onPressed: () {
                        String message = messageController.text.trim();
                        if (message.isNotEmpty) {
                          _chatBloc.add(SendMessageEvent(message));
                          messageController.clear();
                        }
                      },
                      icon: Icon(Icons.send),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    messageController.dispose();
    _focusNode.dispose();
    _scrollController.dispose();
    _chatBloc.close();
    super.dispose();
  }
}